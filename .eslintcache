[{"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/App.js":"1","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Calendar.js":"2","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/reportWebVitals.js":"3","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Modal.js":"4","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/index.js":"5","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/store/index.js":"6","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/static.js":"7","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Alert.js":"8","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/EventDisplayer.js":"9","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/CreatEvent.js":"10"},{"size":756,"mtime":1606560338898,"results":"11","hashOfConfig":"12"},{"size":6556,"mtime":1606691760845,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1606353198693,"results":"14","hashOfConfig":"12"},{"size":1560,"mtime":1606698265373,"results":"15","hashOfConfig":"12"},{"size":500,"mtime":1606597248331,"results":"16","hashOfConfig":"12"},{"size":2084,"mtime":1606694633485,"results":"17","hashOfConfig":"12"},{"size":344,"mtime":1606619566460,"results":"18","hashOfConfig":"12"},{"size":1581,"mtime":1606665393477,"results":"19","hashOfConfig":"12"},{"size":4068,"mtime":1606698564578,"results":"20","hashOfConfig":"12"},{"size":5271,"mtime":1606695134760,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"id7xea",{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/App.js",["45"],"import logo from './logo.svg';\nimport Calendar from './Calendar';\nimport { Provider } from 'react-redux'\nimport store from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Calendar />\n      </Provider>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Calendar.js",["46","47","48","49","50","51","52"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Alert from './Alert';\nimport moment from 'moment';\nimport Modal from './Modal';\nimport './styles.css';\n\n\nfunction Calendar() {\n  const events = useSelector(state => state.data);\n  const selectedDate = useSelector(state => state.selectedDate);\n  const [addNewEventVisible, setAddNewEventVisible] = useState(false)\n  const [monthOffset, setMonthOffset] = useState(0)\n  const [currentMonth, setCurrentMonth] = useState(moment().add(0, 'months'))\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const dispatch = useDispatch();\n  \n  // const [lastMonth, setLastMonth] = useState(Array.from({length: moment().add(monthOffset - 1,'months').daysInMonth()}, (x, i) => moment().add(monthOffset - 1,'months').startOf('month').add(i, 'days')))\n  const [nextMonth, setNextMonth] = useState(Array.from({length: moment().add(monthOffset + 1,'months').daysInMonth()}, (x, i) => moment().add(monthOffset + 1,'months').startOf('month').add(i, 'days')))\n  const [currentMonthDates, setCurrentMonthDates] = useState(Array.from({length: moment().add(monthOffset,'months').daysInMonth()}, (x, i) => moment().add(monthOffset,'months').startOf('month').add(i, 'days')))\n  // const lastMonth = moment().add(monthOffset - 1, 'months');\n  // const nextMonth = moment().add(monthOffset + 1, 'months');\n  // const currentMonthDates = new Array(currentMonth.daysInMonth()).fill(null).map((x, i) => currentMonth.startOf('month').add(i, 'days'));\n  const weekArray = moment.weekdays()\n\n\n  useEffect(() => {\n    if (!addNewEventVisible) {\n      dispatch({\n        type: 'SELECTED_DATE',\n        data: '',\n      })\n      console.log('removi')\n    }\n  },[addNewEventVisible])\n\n  useEffect(() => {\n    console.log(events)\n  },[events])\n\n  useEffect(() => {\n    console.log(selectedDate)\n  },[selectedDate])\n  // useEffect(() => {\n  //   currentMonthDates = [];\n  // },[monthOffset])\n\n  // const getDaysByMonth = (month) => {\n  //   console.log('month', month)\n  //   const daysInMonth = moment(month).daysInMonth();\n  //   return Array.from({length: daysInMonth}, (v, k) => k + 1)\n  // };\n\n  useEffect(() => {\n    // setCurrentMonth(moment().add(monthOffset, 'months'));\n    // setNextMonth(Array.from({length: moment().add(monthOffset + 1,'months').daysInMonth()}, (x, i) => moment().add(monthOffset + 1,'months').startOf('month').add(i, 'days')));\n    // setCurrentMonthDates(Array.from({length: moment().add(monthOffset,'months').daysInMonth()}, (x, i) => moment().add(monthOffset,'months').startOf('month').add(i, 'days')));\n  },[monthOffset])\n\n  \n  \n  useEffect(() => {\n    // console.log('mudou currentMonthDates', currentMonthDates[0].day())\n    // const date = currentMonthDates[0].day();\n    // if(date > 0) {\n    //   for (var i = 0; i < date; i++) {\n    //     currentMonthDates.unshift(currentMonthDates[0].add(i - 1, 'days'))\n    //   }\n    // }\n    // let auxArray = []\n    // if(currentMonthDates.length +  auxArray.length < 35) {\n    //   console.log(currentMonthDates.length)\n    //   setCurrentMonthDates(currentMonthDates.concat(nextMonth.slice(0, 35 - currentMonthDates.length)));\n    // }\n    \n    //setCurrentMonthDates(currentMonthDates.concat(auxArray))\n    //console.log(auxArray)\n  },[])\n\n  const RenderEvents = (props) => {\n    const { date } = props;\n    const currentDate = date.format('DD/MM/YYYY');\n    return (\n      <div className=\"calendar-event-wrapper\">\n        {\n          events && events[currentDate] && events[currentDate].map((event, index) => {\n            return (\n              <div key={event.hour} className=\"calendar-event-item\" onClick={(e) => handleEventClick(e, props.date.format('DD/MM/YYYY'), index)}>\n                <span className=\"event-circle\" style={{ backgroundColor: event.color }}></span>\n                <span className=\"event-title\">\n                  {event.title && event.title}\n                  {/* Nome do evento */}\n                </span>\n                {/* <span className=\"event-hour\">{event.hour && event.hour}</span> */}\n                <span className=\"event-hour\">{event.hour && event.hour}</span>\n              </div>\n            );\n          })\n        }\n      </div>\n    );\n  }\n\n  const MonthChooserHeader = () => {\n    return (\n      <div className=\"calendar-chooser-header\">\n        <div onClick={() => setMonthOffset(monthOffset - 1)}>\n          {' < '}\n        </div>\n        {currentMonth.format(\"MMMM, YYYY\")}\n        <div onClick={() => setMonthOffset(monthOffset + 1)}>\n          {' > '}\n        </div>\n      </div>\n    );\n  }\n\n  const HeaderCalendar = () => {\n    return (\n      <div className=\"calendar-week-header\">\n        {\n          weekArray.map((weekdayItem) => {\n            return (\n              <div key={weekdayItem} className=\"calendar-week-header\" style={{ paddingLeft: 1 }}>\n                {weekdayItem}\n              </div>\n            );\n          })\n        }\n      </div>\n    );\n  }\n\n  const handleDateClick = (date) => {\n    console.log('chamei date')\n    dispatch({\n      type: 'SELECTED_DATE',\n      data: { date },\n    })\n    setSelectedIndex(date)\n    setAddNewEventVisible(true)\n  }\n\n  const handleEventClick = (e, date, index) => {\n    console.log('chamei event')\n    e.stopPropagation();\n    dispatch({\n      type: 'SELECTED_EVENT',\n      data: {...events[date][index], index, date},\n    })\n\n    setAddNewEventVisible(true) \n  }\n\n  return (\n    <>\n      <MonthChooserHeader />\n      <HeaderCalendar />\n      {/* <Alert /> */}\n      <Modal\n        setAddNewEventVisible={setAddNewEventVisible}\n        addNewEventVisible={addNewEventVisible}\n      />\n      <div className=\"calendar-wrapper\">\n        {\n          currentMonthDates.map((date, index) => {\n            // console.log(date)\n            // console.log(date.format('L'))\n            return (\n              <div onClick={() => handleDateClick(date.format('DD/MM/YYYY'), index)} className=\"calendar-item-wrapper\" key={date.format('L')}>\n              {/* <div className=\"calendar-item-wrapper\" key={date.format('L')}> */}\n                <div className={`${(date.day() === 0 || date.day() === 6) ? 'weekend' : 'calendar-item'}`}>\n                  <div className=\"event-date-number\">\n                    {date.date()}\n                  </div>\n                  <RenderEvents date={date}/>\n                </div>\n                \n                {/* <>\n                </> */}\n              </div>\n            );\n          })\n        }\n      </div>\n    </>\n  );\n}\n\nexport default Calendar;\n","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/reportWebVitals.js",[],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Modal.js",["53","54","55","56","57","58","59","60"],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/index.js",[],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/store/index.js",["61","62"],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/static.js",[],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/Alert.js",["63","64"],"/Users/lucasbernardes/Desktop/calendar-code-challenge/src/EventDisplayer.js",["65","66","67"],"import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Modal, Button, ListGroup, Accordion } from 'react-bootstrap';\nimport moment from 'moment';\nimport axios from \"axios\";\n\n\nfunction EventDisplayer(props) { \n  const { selectedEvent, hideModalEvent, addNewEventVisible } = props;\n  const [weather, setWeather] = useState([])\n  const [isLoadingWeaher, setIsLoadingWeaher] = useState(false)\n  const events = useSelector(state => state.data); \n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setWeather('')\n    setIsLoadingWeaher(true)\n    const options = {\n      method: 'GET',\n      url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\n      params: {\n        q: selectedEvent.city && selectedEvent.city,\n        cnt: '16',\n        units: 'metric'\n      },\n      headers: {\n        'x-rapidapi-key': '99911a1476msh22ab3d3cde144f0p107d38jsna51a006db844',\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data)\n      if (response.data && response.data.list) {\n        setWeather(response.data.list)\n      }\n      setIsLoadingWeaher(false)\n    }).catch(function (error) {\n      console.error(error);\n      setWeather('Error finding weather')\n      setIsLoadingWeaher(false)\n    });\n  },[])\n\n  // useEffect(() => {\n  //   if (!addNewEventVisible) {\n  //     setWeather([])\n  //   }\n  // },[addNewEventVisible])\n\n  const handleDeleteEvent = () => {\n    const newDate = {...events};\n    newDate[selectedEvent.date].splice(selectedEvent.index, 1)\n    dispatch({\n      type: 'REMOVE_EVENT',\n      data: newDate,\n    })\n    hideModalEvent()\n  }\n\n  const handleEditEvent = () => {\n    dispatch({\n      type: 'SELECTED_EVENT',\n      data: selectedEvent,\n    })\n  }\n\n  const HandleWeather = () => {\n\n    console.log('weatjer', weather)\n    // if (weather === 'Error finding weather') {\n    //   return(\n    //     <>\n    //   )\n    // }\n    if (weather && weather.constructor === Array) {\n      const listWeather = weather.map((day) => {\n        if (day.weather) {\n          const dayWeather = day.weather.map((actualWeather) => {\n            return actualWeather.description;\n          })\n          return dayWeather;\n        }\n        return null\n      })\n\n      return(\n        <Card.Text>\n           {/* {`Weather on ${weather.}for Next 16 Days:`} */}\n           <Accordion>\n           <Card>\n            <Card.Header>\n           <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n              {`Weather for Next 16 Days:`}\n            </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <ListGroup>\n              {\n                listWeather.map((weatherList, index) => {\n                  return (\n                    <ListGroup.Item>{`${moment().add(index, 'days').format('DD/MM')} - ${weatherList.join(', ')}`}</ListGroup.Item>\n                  );\n                })\n              }\n              </ListGroup>\n            </Accordion.Collapse>\n            </Card>\n          </Accordion>\n        </Card.Text>\n      )\n      // console.log(listWeather)\n    }\n    return null\n    \n\n\n    \n  }\n\n  return (\n    <>\n      {console.log(selectedEvent)}\n      <Modal.Header className=\"header-color\" closeButton>\n      <Modal.Title>{selectedEvent.hour && selectedEvent.date ? moment(`${selectedEvent.date} ${selectedEvent.hour}`).format('DD/MM/YYYY HH:mm').toString() : ''}</Modal.Title>\n      </Modal.Header>\n      <Card>\n        <Card.Body>\n          <Card.Title>{selectedEvent.title && selectedEvent.title}</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">{selectedEvent.city && selectedEvent.city}</Card.Subtitle>\n          <HandleWeather />\n          <Button onClick={handleEditEvent} variant=\"primary\">Edit</Button>{' '}\n          <Button onClick={handleDeleteEvent}  variant=\"danger\">Delete</Button>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n\nexport default EventDisplayer","/Users/lucasbernardes/Desktop/calendar-code-challenge/src/CreatEvent.js",["68"],{"ruleId":"69","severity":1,"message":"70","line":1,"column":8,"nodeType":"71","messageId":"72","endLine":1,"endColumn":12},{"ruleId":"69","severity":1,"message":"73","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":13},{"ruleId":"69","severity":1,"message":"74","line":14,"column":24,"nodeType":"71","messageId":"72","endLine":14,"endColumn":39},{"ruleId":"69","severity":1,"message":"75","line":15,"column":10,"nodeType":"71","messageId":"72","endLine":15,"endColumn":23},{"ruleId":"69","severity":1,"message":"76","line":19,"column":10,"nodeType":"71","messageId":"72","endLine":19,"endColumn":19},{"ruleId":"69","severity":1,"message":"77","line":19,"column":21,"nodeType":"71","messageId":"72","endLine":19,"endColumn":33},{"ruleId":"69","severity":1,"message":"78","line":20,"column":29,"nodeType":"71","messageId":"72","endLine":20,"endColumn":49},{"ruleId":"79","severity":1,"message":"80","line":35,"column":5,"nodeType":"81","endLine":35,"endColumn":25,"suggestions":"82"},{"ruleId":"69","severity":1,"message":"83","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":18},{"ruleId":"69","severity":1,"message":"84","line":1,"column":20,"nodeType":"71","messageId":"72","endLine":1,"endColumn":29},{"ruleId":"69","severity":1,"message":"85","line":1,"column":31,"nodeType":"71","messageId":"72","endLine":1,"endColumn":37},{"ruleId":"69","severity":1,"message":"86","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":21},{"ruleId":"69","severity":1,"message":"87","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":14},{"ruleId":"69","severity":1,"message":"88","line":5,"column":8,"nodeType":"71","messageId":"72","endLine":5,"endColumn":14},{"ruleId":"69","severity":1,"message":"89","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":16},{"ruleId":"69","severity":1,"message":"90","line":9,"column":8,"nodeType":"71","messageId":"72","endLine":9,"endColumn":18},{"ruleId":"69","severity":1,"message":"91","line":53,"column":15,"nodeType":"71","messageId":"72","endLine":53,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":55,"column":45,"nodeType":"94","messageId":"95","endLine":55,"endColumn":47},{"ruleId":"69","severity":1,"message":"88","line":2,"column":27,"nodeType":"71","messageId":"72","endLine":2,"endColumn":33},{"ruleId":"79","severity":1,"message":"96","line":16,"column":8,"nodeType":"81","endLine":16,"endColumn":16,"suggestions":"97"},{"ruleId":"69","severity":1,"message":"98","line":9,"column":42,"nodeType":"71","messageId":"72","endLine":9,"endColumn":60},{"ruleId":"69","severity":1,"message":"99","line":11,"column":10,"nodeType":"71","messageId":"72","endLine":11,"endColumn":25},{"ruleId":"79","severity":1,"message":"100","line":42,"column":5,"nodeType":"81","endLine":42,"endColumn":7,"suggestions":"101"},{"ruleId":"79","severity":1,"message":"102","line":25,"column":5,"nodeType":"81","endLine":25,"endColumn":31,"suggestions":"103"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'setCurrentMonth' is assigned a value but never used.","'selectedIndex' is assigned a value but never used.","'nextMonth' is assigned a value but never used.","'setNextMonth' is assigned a value but never used.","'setCurrentMonthDates' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useDispatch' is defined but never used.","'moment' is defined but never used.","'Button' is defined but never used.","'radios' is defined but never used.","'InputGroup' is defined but never used.","'event' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'toggleShowA'. Either include it or remove the dependency array.",["105"],"'addNewEventVisible' is assigned a value but never used.","'isLoadingWeaher' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedEvent.city'. Either include it or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'selectedDate'. Either include it or remove the dependency array.",["107"],{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [addNewEventVisible, dispatch]",{"range":"116","text":"117"},"Update the dependencies array to be: [events, toggleShowA]",{"range":"118","text":"119"},"Update the dependencies array to be: [selectedEvent.city]",{"range":"120","text":"121"},"Update the dependencies array to be: [props.addNewEventVisible, selectedDate]",{"range":"122","text":"123"},[1748,1768],"[addNewEventVisible, dispatch]",[468,476],"[events, toggleShowA]",[1398,1400],"[selectedEvent.city]",[899,925],"[props.addNewEventVisible, selectedDate]"]